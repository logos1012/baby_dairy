generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Family relationships
  familyMembers FamilyMember[]

  // Posts and interactions
  posts    Post[]
  comments Comment[]
  likes    Like[]

  @@map("users")
}

model Family {
  id         String   @id @default(cuid())
  name       String
  inviteCode String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Family relationships
  members FamilyMember[]
  posts   Post[]

  @@map("families")
}

model FamilyMember {
  id       String     @id @default(cuid())
  role     FamilyRole @default(MEMBER)
  joinedAt DateTime   @default(now())

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
  @@map("family_members")
}

model Post {
  id        String     @id @default(cuid())
  content   String
  mediaUrls String // JSON array stored as string
  mediaType MediaType?
  tags      String // JSON array stored as string
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Family relationship
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  // Post interactions
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post relationship
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Post relationship
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum FamilyRole {
  ADMIN
  MEMBER
}
